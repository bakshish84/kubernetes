In Kubernetes, namespaces are used to logically separate and organize resources in a cluster. When you create a Kubernetes cluster, several namespaces are created by default

There can be any number if namespaces that can be created inside the cluster.

Namespaces allow you to manage resources like CPU, memory, and storage within a specific context. This is especially useful in a multi-tenant environment, where different teams 
or applications might have different resource requirements.

Namespaces help ensure fair usage of cluster resources by enforcing limits on CPU, memory, and the number of objects that can be created within each namespace

Namespaces help to isolate workloads and reduce the risk of resource contention between applications. You can define policies to isolate or allow communication between 
different namespaces.

By default, Pods in different namespaces can communicate with each other. However, you can enforce restrictions by using Network Policies.

For example, you can create a Network Policy that restricts traffic between the development namespace and the production namespace. This is useful for security and preventing 
accidental miscommunication between different environments.

Nodes and kubernetes volumes do not come under the namespaces and are visible to every namespace.

default: This is default namespace for kubernetes resources that dont explicitly specify a namespace.
If pod, service or nay other resource is created with defining namespace it will be created in default namespace.

Kube-system: This namespace is used by kubernetes system-level components and resources, including system services such as kubernetes dashboard, kube-dns, etcd, kube-proxy etc.

kube-public: this namespace is meant for resources that should be accessible publicly within the cluster. used by kubernetes for resources that are intended to be visible to all users and components of the cluster.

kube-node-lease: This namespace is used for node lease objects, which provide a way to track node availability and health.

for listing namespaces:
# kubernetes get ns

for creating new namespace
# kubernetes create ns learning

for viewing pods in specific namespace
# kubectl get pods -n kube-system

for deleting namespace
# kubectl remove ns learning